name: Pipeline
on: 
  push:
    branches:
      - feat-endlab
jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.TOKEN_GH }}

    - name: Install dependencies with Yarn 
      run: yarn install

    - name: Build project
      run: yarn run build

    #- name: List Built Files
    #  run: ls -l

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v2 
      env:
     #   GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: cmendo_Laboratorio-final
        SONAR_ORGANIZATION: cmendo
      with:
        args: >
          -Dsonar.projectKey=cmendo_Laboratorio-final
          -Dsonar.organization=cmendo
          -Dsonar.sources=.
          -Dsonar.exclusions=**/*.java
    
    - name: Check SAST Results
      run: |
        # Realiza una solicitud GET a la API de SonarCloud para buscar problemas críticos, altos y medios
        RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
          "https://sonarcloud.io/api/issues/search?componentKeys=cmendo_Laboratorio-final&severities=CRITICAL,MAJOR,MINOR")
        
        # Extrae el número total de problemas encontrados
        ISSUES_COUNT=$(echo "$RESPONSE" | jq -r .total)
        
        # Verifica si se encontraron problemas y muestra la cantidad encontrada
        if [ "$ISSUES_COUNT" -gt 0 ]; then
          echo "Found $ISSUES_COUNT vulnerabilities."
          # exit 1  # Esto hará que el pipeline falle si se encuentran vulnerabilidades
          exit 1  # Esto hará que el pipeline falle si se encuentran vulnerabilidades
        else
          echo "No vulnerabilities found."
        fi
  
    - name: Check Quality Gate Status
      run: |
        echo "Checking Quality Gate status"
        RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
        "https://sonarcloud.io/api/qualitygates/project_status?projectKey=ArielAndresMarihuenMatus_Laboratorio-final")
        echo "SonarCloud response: $RESPONSE"
        SONAR_STATUS=$(echo "$RESPONSE" | jq -r .projectStatus.status)
        if [ "$SONAR_STATUS" != "OK"]; then
          echo "Quality Gate failed: $SONAR_STATUS"
          # exit 1
          exit 1
        else
          echo "Quality Gate passed: $SONAR_STATUS"
        fi
      env:
        #GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: cmendo_Laboratorio-final
        SONAR_ORGANIZATION: cmendo