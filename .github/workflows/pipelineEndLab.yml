on: 
  push:
    branches:
      - feat-endlab
jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # - name: Checkout code
    #   uses: actions/checkout@v2
    #   with:
    #     token: ${{ secrets.SONAR_TOKEN }}

    # - name: Install dependencies with Yarn 
    #   run: yarn install

    # - name: Build project
    #   run: yarn run build
    
    # - name: List Built Files
    #   run: ls -l
    
  #   - name: SonarCloud Scan
  #     uses: sonarsource/sonarcloud-github-action@v2 
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_PROJECT_KEY: ArielAndresMarihuenMatus_Laboratorio-final
  #       SONAR_ORGANIZATION: DevSecOpsArielMarihuen
  #     with:
  #       args: >
  #         -Dsonar.projectKey=ArielAndresMarihuenMatus_Laboratorio-final
  #         -Dsonar.organization=devsecopsarielmarihuen
  #         -Dsonar.sources=.
  #         -Dsonar.exclusions=**/node_modules/**
  #   - name: Check SAST Results
  #     run: |
  #       # Realiza una solicitud GET a la API de SonarCloud para buscar problemas críticos, altos y medios
  #       RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
  #         "https://sonarcloud.io/api/issues/search?componentKeys=ArielAndresMarihuenMatus_Laboratorio-final&severities=CRITICAL,MAJOR,MINOR")
        
  #       # Extrae el número total de problemas encontrados
  #       ISSUES_COUNT=$(echo "$RESPONSE" | jq -r .total)
        
  #       # Verifica si se encontraron problemas y muestra la cantidad encontrada
  #       if [ "$ISSUES_COUNT" -gt 0 ]; then
  #         echo "Found $ISSUES_COUNT vulnerabilities."
  #         exit 1  # Esto hará que el pipeline falle si se encuentran vulnerabilidades
  #       else
  #         echo "No vulnerabilities found."
  #       fi
  #   - name: Check Quality Gate Status
  #     run: |
  #       echo "Checking Quality Gate status"
  #       RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
  #       "https://sonarcloud.io/api/qualitygates/project_status?projectKey=ArielAndresMarihuenMatus_Laboratorio-final")
  #       echo "SonarCloud response: $RESPONSE"
  #       SONAR_STATUS=$(echo "$RESPONSE" | jq -r .projectStatus.status)
  #       if [ "$SONAR_STATUS" != "OK"]; then
  #         echo "Quality Gate failed: $SONAR_STATUS"
  #         exit 1
  #       else
  #         echo "Quality Gate passed: $SONAR_STATUS"
  #       fi
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_PROJECT_KEY: ArielAndresMarihuenMatus_Laboratorio-final
  #       SONAR_ORGANIZATION: DevSecOpsArielMarihuen

  # SCA:
  #   needs: SAST
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
      
  #   - name: Set up JDK 11
  #     uses: actions/setup-java@v2
  #     with:
  #       distribution: 'adopt'
  #       java-version: '11'
  #   - name: Dependency Check
  #     uses: dependency-check/Dependency-Check_Action@1.1.0
  #     env:
  #       JAVA_HOME: /opt/jdk
  #     id: Depcheck
  #     with:
  #       project: '${{ github.event.repository.name }}'
  #       format: 'HTML'
  #       path: '.'
  #       out: 'report'
  #       args: >
  #         --failOnCVSS 7
  #         --enableRetired
  #   - name: Check Dependency Check Results
  #     run: |
  #       # Verificar el archivo de salida de Dependency Check
  #       REPORT_FILE=$(find ${{ github.workspace }}/reports -name 'dependency-check-report.html')
  #       if grep -q "Critical" "$REPORT_FILE" || grep -q "High" "$REPORT_FILE" || grep -q "Medium" "$REPORT_FILE"; then
  #         echo "Found vulnerabilities in dependencies."
  #         exit 1
  #       else
  #         echo "No vulnerabilities found."
  #       fi
  #   - name: Upload Test Result
  #     uses: actions/upload-artifact@master
  #     with:
  #       name: Depcheck report
  #       path: ${{ github.workspace }}/reports